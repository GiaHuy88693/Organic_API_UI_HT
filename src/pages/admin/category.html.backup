<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Category Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css" />
    <style>
      body {
        font-family: "Inter", sans-serif;
        background-color: #f8f9fa;
      }
      .category-image {
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 8px;
      }
      .modal-body img {
        max-width: 100%;
        height: auto;
        border-radius: 8px;
      }
    </style>
  </head>
  <body>
    <div id="header"></div>

    <div class="container my-5">
      <div class="card shadow-sm rounded-4">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-center mb-4">
            <h5 class="mb-0 fw-bold">Quản lý danh mục</h5>
            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#categoryModal" onclick="openCreateModal()">
              <i class="fas fa-plus me-2"></i>Thêm danh mục
            </button>
          </div>

          <!-- Table -->
          <div class="table-responsive">
            <table class="table table-hover align-middle bg-white">
              <thead class="table-light">
                <tr>
                  <th style="width: 80px">Ảnh</th>
                  <th>Tên danh mục</th>
                  <th>Mô tả</th>
                  <th style="width: 150px">Thao tác</th>
                </tr>
              </thead>
              <tbody id="categoryTableBody">
                <tr>
                  <td colspan="4" class="text-center py-4">
                    <div class="spinner-border text-success" role="status">
                      <span class="visually-hidden">Đang tải...</span>
                    </div>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>

          <!-- Pagination -->
          <div class="d-flex justify-content-between align-items-center mt-3">
            <div id="paginationInfo" class="text-muted small">
              Hiển thị 0 - 0 trong tổng số 0 danh mục
            </div>
            <nav>
              <ul class="pagination pagination-sm mb-0" id="paginationControls"></ul>
            </nav>
          </div>
        </div>
      </div>
    </div>

    <div id="footer"></div>

    <!-- Modal Create/Edit -->
    <div class="modal fade" id="categoryModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="modalTitle">Thêm danh mục mới</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <form id="categoryForm" novalidate>
            <div class="modal-body">
              <input type="hidden" id="categoryId" />
              
              <div class="mb-3">
                <label class="form-label">Tên danh mục <span class="text-danger">*</span></label>
                <input type="text" class="form-control" id="categoryName" required />
                <div class="invalid-feedback">Vui lòng nhập tên danh mục</div>
              </div>

              <div class="mb-3">
                <label class="form-label">Mô tả</label>
                <textarea class="form-control" id="categoryDescription" rows="3"></textarea>
              </div>

              <div class="mb-3">
                <label class="form-label">URL ảnh</label>
                <input type="url" class="form-control" id="categoryImage" placeholder="https://example.com/image.jpg" />
                <div class="form-text">Nhập URL của ảnh danh mục</div>
              </div>

              <!-- Image Preview -->
              <div id="imagePreviewContainer" class="d-none mb-3">
                <label class="form-label">Xem trước ảnh:</label>
                <div>
                  <img id="imagePreview" src="" alt="Preview" style="max-width: 100%; height: auto; border-radius: 8px;" />
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
              <button type="submit" class="btn btn-success" id="submitBtn">
                <i class="fas fa-save me-1"></i>Lưu
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script src="/src/js/config/api.config.js"></script>
    <script src="/src/js/utils/storage.js"></script>
    <script src="/src/js/utils/toast.js"></script>
    <script src="/src/js/utils/auth.guard.js"></script>
    <script src="/src/js/utils/http.client.js"></script>
    <script src="/src/js/services/auth.service.js"></script>
    <script src="/src/js/services/category.service.js"></script>

    <script>
      // Protect admin route
      if (!window.AuthGuard?.requireAdmin?.()) {
        // Will redirect if not admin
        throw new Error('Access denied');
      }
    </script>

    <script>
      let currentPage = 1;
      let totalPages = 1;
      const limit = 10;
      let editingCategoryId = null;

      document.addEventListener("DOMContentLoaded", () => {
        loadHeaderFooter();
        loadCategories();

        // Image preview
        document.getElementById("categoryImage").addEventListener("input", (e) => {
          const url = e.target.value.trim();
          const previewContainer = document.getElementById("imagePreviewContainer");
          const previewImg = document.getElementById("imagePreview");
          
          if (url) {
            previewImg.src = url;
            previewImg.onerror = () => {
              previewContainer.classList.add("d-none");
            };
            previewImg.onload = () => {
              previewContainer.classList.remove("d-none");
            };
          } else {
            previewContainer.classList.add("d-none");
          }
        });

        // Form submit
        document.getElementById("categoryForm").addEventListener("submit", handleFormSubmit);
      });

      async function loadHeaderFooter() {
        try {
          const [headerHtml, footerHtml] = await Promise.all([
            fetch("/src/header.html").then((res) => res.text()),
            fetch("/src/footer.html").then((res) => res.text()),
          ]);

          document.getElementById("header").innerHTML = headerHtml;
          document.getElementById("footer").innerHTML = footerHtml;

          execScriptsIn(document.getElementById("header"));
          execScriptsIn(document.getElementById("footer"));
        } catch (error) {
          console.error("Error loading header/footer:", error);
        }
      }

      function execScriptsIn(container) {
        if (!container) return;
        const scripts = Array.from(container.querySelectorAll("script"));
        scripts.forEach((oldScript) => {
          const newScript = document.createElement("script");
          if (oldScript.src) newScript.src = oldScript.src;
          else newScript.textContent = oldScript.textContent;
          oldScript.parentNode.replaceChild(newScript, oldScript);
        });
      }

      async function loadCategories(page = 1) {
        currentPage = page;
        const tbody = document.getElementById("categoryTableBody");
        
        try {
          tbody.innerHTML = `
            <tr>
              <td colspan="4" class="text-center py-4">
                <div class="spinner-border text-success" role="status">
                  <span class="visually-hidden">Đang tải...</span>
                </div>
              </td>
            </tr>
          `;

          const { items, pagination } = await window.CategoryService.list({
            page: page,
            limit: limit,
            includeDeleted: false,
          });

          if (items.length === 0) {
            tbody.innerHTML = `
              <tr>
                <td colspan="4" class="text-center py-4 text-muted">
                  <i class="fas fa-folder-open fa-2x mb-2 d-block"></i>
                  <p class="mb-0">Chưa có danh mục nào</p>
                </td>
              </tr>
            `;
            updatePaginationInfo(0, 0, 0);
            renderPaginationControls(0);
            return;
          }

          tbody.innerHTML = items.map((category) => {
            const placeholderImg = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='60' height='60'%3E%3Crect width='60' height='60' fill='%23f0f0f0'/%3E%3Ctext x='50%25' y='50%25' dominant-baseline='middle' text-anchor='middle' font-family='sans-serif' font-size='12' fill='%23999'%3ENo Image%3C/text%3E%3C/svg%3E";
            const imgSrc = category.image || placeholderImg;
            const description = category.description || '<span class="text-muted fst-italic">Không có mô tả</span>';

            return `
              <tr>
                <td>
                  <img src="${imgSrc}" alt="${category.name}" class="category-image" 
                       onerror="this.src='${placeholderImg}'" />
                </td>
                <td class="fw-semibold">${category.name}</td>
                <td>${description}</td>
                <td>
                  <button class="btn btn-sm btn-warning me-1" onclick="openEditModal('${category._id || category.id}')">
                    <i class="fas fa-edit"></i>
                  </button>
                  <button class="btn btn-sm btn-danger" onclick="deleteCategory('${category._id || category.id}', '${category.name}')">
                    <i class="fas fa-trash"></i>
                  </button>
                </td>
              </tr>
            `;
          }).join("");

          totalPages = pagination?.totalPages || 1;
          const total = pagination?.total || items.length;
          const startIndex = (page - 1) * limit + 1;
          const endIndex = Math.min(page * limit, total);

          updatePaginationInfo(startIndex, endIndex, total);
          renderPaginationControls(totalPages);

        } catch (error) {
          console.error("Load categories error:", error);
          tbody.innerHTML = `
            <tr>
              <td colspan="4" class="text-center py-4 text-danger">
                <i class="fas fa-exclamation-triangle fa-2x mb-2 d-block"></i>
                <p class="mb-0">${error.message || "Không thể tải danh sách danh mục"}</p>
              </td>
            </tr>
          `;
          window.Toast?.error?.(error.message || "Không thể tải danh sách danh mục");
        }
      }

      function updatePaginationInfo(start, end, total) {
        document.getElementById("paginationInfo").textContent = 
          `Hiển thị ${start} - ${end} trong tổng số ${total} danh mục`;
      }

      function renderPaginationControls(pages) {
        const controls = document.getElementById("paginationControls");
        if (pages <= 1) {
          controls.innerHTML = "";
          return;
        }

        let html = `
          <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
            <a class="page-link" href="#" onclick="loadCategories(${currentPage - 1}); return false;">
              <i class="fas fa-chevron-left"></i>
            </a>
          </li>
        `;

        for (let i = 1; i <= pages; i++) {
          if (i === 1 || i === pages || (i >= currentPage - 1 && i <= currentPage + 1)) {
            html += `
              <li class="page-item ${i === currentPage ? 'active' : ''}">
                <a class="page-link" href="#" onclick="loadCategories(${i}); return false;">${i}</a>
              </li>
            `;
          } else if (i === currentPage - 2 || i === currentPage + 2) {
            html += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
          }
        }

        html += `
          <li class="page-item ${currentPage === pages ? 'disabled' : ''}">
            <a class="page-link" href="#" onclick="loadCategories(${currentPage + 1}); return false;">
              <i class="fas fa-chevron-right"></i>
            </a>
          </li>
        `;

        controls.innerHTML = html;
      }

      function openCreateModal() {
        editingCategoryId = null;
        document.getElementById("modalTitle").textContent = "Thêm danh mục mới";
        document.getElementById("categoryForm").reset();
        document.getElementById("categoryId").value = "";
        document.getElementById("imagePreviewContainer").classList.add("d-none");
        document.getElementById("categoryForm").classList.remove("was-validated");
      }

      async function openEditModal(categoryId) {
        try {
          editingCategoryId = categoryId;
          document.getElementById("modalTitle").textContent = "Chỉnh sửa danh mục";
          
          const category = await window.CategoryService.getById(categoryId);
          
          document.getElementById("categoryId").value = category._id || category.id;
          document.getElementById("categoryName").value = category.name;
          document.getElementById("categoryDescription").value = category.description || "";
          document.getElementById("categoryImage").value = category.image || "";

          if (category.image) {
            document.getElementById("imagePreview").src = category.image;
            document.getElementById("imagePreviewContainer").classList.remove("d-none");
          }

          const modal = new bootstrap.Modal(document.getElementById("categoryModal"));
          modal.show();

        } catch (error) {
          console.error("Load category error:", error);
          window.Toast?.error?.(error.message || "Không thể tải thông tin danh mục");
        }
      }

      async function handleFormSubmit(e) {
        e.preventDefault();
        
        const form = e.target;
        if (!form.checkValidity()) {
          form.classList.add("was-validated");
          return;
        }

        const name = document.getElementById("categoryName").value.trim();
        const description = document.getElementById("categoryDescription").value.trim();
        const image = document.getElementById("categoryImage").value.trim();

        if (!name) {
          window.Toast?.error?.("Vui lòng nhập tên danh mục");
          return;
        }

        const payload = { name };
        if (description) payload.description = description;
        if (image) payload.image = image;

        const submitBtn = document.getElementById("submitBtn");
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Đang lưu...';

        try {
          if (editingCategoryId) {
            await window.CategoryService.update(editingCategoryId, payload);
            window.Toast?.success?.("Cập nhật danh mục thành công");
          } else {
            await window.CategoryService.create(payload);
            window.Toast?.success?.("Tạo danh mục thành công");
          }

          bootstrap.Modal.getInstance(document.getElementById("categoryModal")).hide();
          loadCategories(currentPage);
          form.reset();
          form.classList.remove("was-validated");

        } catch (error) {
          console.error("Save category error:", error);
          window.Toast?.error?.(error.message || "Không thể lưu danh mục");
        } finally {
          submitBtn.disabled = false;
          submitBtn.innerHTML = '<i class="fas fa-save me-1"></i>Lưu';
        }
      }

      async function deleteCategory(categoryId, categoryName) {
        const confirmed = confirm(`Bạn có chắc chắn muốn xóa danh mục "${categoryName}"?`);
        if (!confirmed) return;

        try {
          await window.CategoryService.delete(categoryId);
          window.Toast?.success?.("Xóa danh mục thành công");
          
          // Reload current page, or previous page if current page is empty
          const { items } = await window.CategoryService.list({ page: currentPage, limit: limit });
          if (items.length === 0 && currentPage > 1) {
            loadCategories(currentPage - 1);
          } else {
            loadCategories(currentPage);
          }

        } catch (error) {
          console.error("Delete category error:", error);
          window.Toast?.error?.(error.message || "Không thể xóa danh mục");
        }
      }
    </script>
  </body>
</html>
